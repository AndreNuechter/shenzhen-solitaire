- const cardWidth = 128;
- const cardHeight = 178;
- const cardGap = 8;
- const circleRadius = 24;
-
    const viewBox = {
        x: -cardGap,
        y: -cardGap,
        width: (cardWidth + cardGap) * 8 + cardGap,
        get height() { return Math.ceil((this.width / 16) * 10); }
    };

doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport" content="width=device-width, initial-scale=1")
        meta(http-equiv="X-UA-Compatible" content="ie=edge")
        meta(name="description" content="A version of the popular card-game.")
        meta(name="theme-color" content="gold")
        link(rel="manifest" href="./manifest.json")
        link(rel="stylesheet" href="css/index.css")
        // build:js
        script(src="js/index.js" type="module")
        script(src="js/card-slots.js" type="module")
        // endbuild
        title Shenzhen Solitaire
    body
        #reset-btn
        #win-notification Congratulations, you have won.
        svg#table(preserveAspectRatio="xMinYMax meet" viewBox=`${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`)
            rect(x=viewBox.x y=viewBox.y width=viewBox.width height=viewBox.height filter="url(#texture)" fill="none")

            each _, i in new Array(3)
                g.card-slot(transform=`translate(${(cardWidth + cardGap) * i},0)` data-slot-type="dragon")
                    rect(x=0 y=0 rx=5)
            
            g.card-slot(transform=`translate(${(cardWidth + cardGap * 2) * 3},0)` data-slot-type="flower")
                rect(x=0 y=0 rx=5)

            g#dragon-summoning-btns(transform=`translate(${(cardWidth + cardGap * 2) * 4},${circleRadius + cardGap})`)
                each color, i in ['black', 'green', 'red']
                    g.dragon-summoning-btn(data-color=color)
                        circle(
                            cx=circleRadius 
                            cy=((circleRadius * 2 + cardGap) * i) 
                            r=circleRadius)
                        text(fill=color
                            x=circleRadius 
                            y=((circleRadius * 2 + cardGap) * i)) â„¦

            each _, i in new Array(3)
                g.card-slot(transform=`translate(${(cardWidth + cardGap) * (i + 5)},0)` data-slot-type="collection")
                    rect(x=0 y=0 rx=5)

            each _, i in new Array(8)
                g.card-slot(transform=`translate(${(cardWidth + cardGap) * i},${cardHeight + cardGap * 3})` data-slot-type="stacking")
                    rect(x=0 y=0 rx=5)

        svg(width="0" height="0" style="position: absolute")
            defs
                linearGradient#button(gradientTransform="rotate(90)")
                    stop(offset="5%" stop-color="grey")
                    stop(offset="95%" stop-color="whitesmoke")
                linearGradient#button-clicked(gradientTransform="rotate(90)")
                    stop(offset="5%" stop-color="whitesmoke")
                    stop(offset="95%" stop-color="grey")
                filter#texture(x="0" y="0" width="100%" height="100%")
                    feTurbulence(type="fractalNoise" baseFrequency="1" result="noise" numOctaves="1")
                    feSpecularLighting(in="noise" lighting-color="forestgreen" surfaceScale="4")
                        feDistantLight(azimuth="45" elevation="10")
                pattern#card-backside(viewBox="-5,0,20,10" width="20%" height="20%")
                    rect(x="-15" y="-10" width="40" height="40" fill="#FFD700")
                    polygon(points="0,0 2,5 0,10 5,8 10,10 8,5 10,0 5,2" fill="#f00" stroke="#000")